name: Deploy FastAPI Backend to EC2
 
on:

  push:

    branches:

      - main

  workflow_dispatch:
 
jobs:

  deploy:

    name: Deploy Backend to EC2

    runs-on: ubuntu-latest
 
    steps:

      - name: Checkout latest code

        uses: actions/checkout@v4
 
      - name: Deploy and restart backend on EC2

        uses: appleboy/ssh-action@v1.0.3

        with:

          host: ${{ secrets.EC2_HOST }}

          username: ${{ secrets.EC2_USER }}

          key: ${{ secrets.EC2_SSH_KEY }}

          script_stop: false

          script: |

            set -e

            echo "üöÄ Starting backend deployment..."

            # Navigate to backend directory

            cd /var/www/Elden-ATS/Backend-ATS

            # Backup existing .env if it exists

            if [ -f .env ]; then

              echo "üíæ Backing up existing .env..."

              cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

            fi

            # Update environment file

            echo "üîê Creating .env file..."

            echo "${{ secrets.BACKEND_ENV }}" > .env

            echo "‚úÖ Environment file created"

            # Check if git repo exists, if not clone it

            if [ ! -d ".git" ]; then

              echo "üì• Cloning repository for the first time..."

              cd /var/www/Elden-ATS

              sudo rm -rf Backend-ATS

              sudo git clone ${{ github.server_url }}/${{ github.repository }} Backend-ATS

              cd Backend-ATS

              sudo chown -R ubuntu:ubuntu /var/www/Elden-ATS/Backend-ATS

            else

              echo "üì• Updating repository..."

              git fetch origin main

              git reset --hard origin/main

            fi

            # Ensure virtual environment exists

            if [ ! -d ".venv" ]; then

              echo "üêç Creating virtual environment..."

              python3 -m venv .venv

            fi

            # Activate virtual environment and install dependencies

            echo "üì¶ Installing dependencies..."

            source .venv/bin/activate

            pip install --upgrade pip --quiet

            if [ -f requirements.txt ]; then

              pip install --no-cache-dir -r requirements.txt --quiet

              echo "‚úÖ Dependencies installed"

            else

              echo "‚ö†Ô∏è Warning: requirements.txt not found"

            fi

            # Ensure systemd service file exists

            if [ ! -f /etc/systemd/system/ats-backend.service ]; then

              echo "‚ö†Ô∏è Service file not found. Creating it..."

              sudo tee /etc/systemd/system/ats-backend.service > /dev/null <<'SERVICEEOF'

            [Unit]

            Description=ATS FastAPI backend (uvicorn)

            After=network.target

            [Service]

            User=ubuntu

            Group=www-data

            WorkingDirectory=/var/www/Elden-ATS/Backend-ATS

            Environment=PYTHONUNBUFFERED=1

            ExecStart=/bin/bash -lc 'source /var/www/Elden-ATS/Backend-ATS/.venv/bin/activate && exec /var/www/Elden-ATS/Backend-ATS/.venv/bin/uvicorn app.main:app --host 127.0.0.1 --port 8000'

            Restart=on-failure

            RestartSec=5s

            [Install]

            WantedBy=multi-user.target

            SERVICEEOF

              sudo systemctl daemon-reload

              sudo systemctl enable ats-backend

            fi

            # Restart backend service

            echo "‚ôªÔ∏è Restarting backend service..."

            sudo systemctl restart ats-backend

            # Wait a moment for service to start

            sleep 3

            # Check service status

            if sudo systemctl is-active --quiet ats-backend; then

              echo "‚úÖ Backend service is running"

              sudo systemctl status ats-backend --no-pager | head -10

              # Test if backend is responding

              if curl -s http://127.0.0.1:8000 > /dev/null || curl -s http://127.0.0.1:8000/docs > /dev/null; then

                echo "‚úÖ Backend is responding on port 8000"

              else

                echo "‚ö†Ô∏è Backend service is running but not responding on port 8000"

              fi

            else

              echo "‚ùå Backend service failed to start"

              sudo journalctl -u ats-backend -n 50 --no-pager

              exit 1

            fi

            echo "‚úÖ Backend deployment completed successfully!"
            #
 
